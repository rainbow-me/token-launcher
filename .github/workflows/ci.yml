name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./sdk
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'yarn'
        cache-dependency-path: './sdk/yarn.lock'
    
    - name: Install Foundry (direct download)
      run: |
        # Create directories
        mkdir -p $HOME/.foundry/bin
        
        # Download latest foundry binaries directly
        FOUNDRY_VERSION="nightly"
        DOWNLOAD_URL="https://github.com/foundry-rs/foundry/releases/download/$FOUNDRY_VERSION/foundry_${FOUNDRY_VERSION}_linux_amd64.tar.gz"
        
        echo "Downloading from $DOWNLOAD_URL"
        curl -L $DOWNLOAD_URL | tar xz -C $HOME/.foundry/bin
        
        # Set permissions
        chmod +x $HOME/.foundry/bin/forge
        chmod +x $HOME/.foundry/bin/cast
        chmod +x $HOME/.foundry/bin/anvil
        
        # Add to PATH
        echo "$HOME/.foundry/bin" >> $GITHUB_PATH
        export PATH="$HOME/.foundry/bin:$PATH"
    
    - name: Verify Foundry installation
      run: |
        ls -la $HOME/.foundry/bin/
        export PATH="$HOME/.foundry/bin:$PATH"
        which anvil || echo "anvil not in PATH"
        $HOME/.foundry/bin/anvil --version
    
    - name: Install dependencies
      run: yarn install
    
    # Temporarily skip linting
    # - name: Lint
    #   run: yarn lint
      
    - name: Build
      run: yarn build
      
    - name: Test
      run: |
        export PATH="$HOME/.foundry/bin:$PATH"
        # Create .env with secrets for CI
        cat > .env << EOF
        IS_TESTING=true
        RPC_URL=${{ secrets.RPC_URL }}
        API_KEY_DEV=${{ secrets.API_KEY_DEV }}
        API_KEY_PROD=${{ secrets.API_KEY_PROD }}
        API_URL_DEV=${{ secrets.API_URL_DEV }}
        EOF
        
        $HOME/.foundry/bin/anvil --version
        yarn test
      env:
        CI: true

    - name: Check secrets availability
      run: |
        echo "Checking for required secrets..."
        if [ -z "${{ secrets.RPC_URL }}" ]; then
          echo "⚠️ RPC_URL is not set or empty"
        else
          echo "✅ RPC_URL is available"
        fi
        
        if [ -z "${{ secrets.API_URL_DEV }}" ]; then
          echo "⚠️ API_URL_DEV is not set or empty"
        else
          echo "✅ API_URL_DEV is available"
        fi
        # Similar checks for other secrets 